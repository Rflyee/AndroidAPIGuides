Activities（活动）
********************************************
********************************************
	一个Activity是一个应用程序组件，它提供了一个视图，用户通过它可以和应用进行交互
，比如打电话、照相、发邮件或者看地图等。每一个activity都被赋予一个窗口，在这个
窗口里可以构建出用户接口。窗口一般都填满了整个屏幕，但是也可能比屏幕小，并且可
以悬浮在其他窗口之上。
	一个应用通常由多个activity组成，它们之间相互宽松地绑定着。特别指出，在一个应
用中会有一个activity被指定为"main" activity，它会在应用启动的时候首先呈现在用户
面前。每一个activity都可以开启其它的activity来完成不同的行为。每一次一个新的
activity启动时，上一个activity就会停止。但是系统会将activity保存在堆中（"back
stack"，返回堆）。当一个新的activity开启，它被推入返回堆中并获得用户的焦点。返
回堆遵循堆的基本原则--“后进先出”。因此当用户完成当前的活动，并按下"返回"按钮
时，这个活动就会从堆中弹出（并且销毁），然后上一个活动便恢复回来（返回堆会在
Tasks and Back Stack文档中进一步谈论）。
	如果当前activity因为一个新的activity开启而被停止的时候，它会被activity的
生命周期回调方法通知到这个状态的改变。一个activity在它状态改变时会收到很多回
调方法，比如在它被系统创建时，被停止时，恢复时或者被销毁时。每一个回调方法都为开
发者提供机会在状态发生时做出特殊的工作。例如，当一个activity停止时，它应该释
放掉所有比较低大的对象，比如释放掉网络资源和数据库的连接等。当一个activity恢复的时
候，开发者可以重新获取必须的资源，并且恢复被终止的行为。这些状态的转换便组成了
activity的生命周期。
	文档剩余部分谈论了如何创建并使用activity，包括详细地讲解了activity的生命周期，
因此你可以在各种状态转换时做出适当地管理。

Create an Activity 创建Activity
*************************************************
	想创建一个activity（活动），你必须创建一个Activity类的子类（或者是创建一个
已经存在的Activity子类的子类）。在你的创建的子类中应该实现系统调用的回调方法，
这些方法会在activity生命周期中状态改变时被调用。比如当activity被创建时，被停止
时，被恢复时或者被销毁时。以下是两个重要的回调方法：
onCreate()
	你必须实现这个方法。系统在创建你的activity时调用该方法。在这个方法的实现中
你应该初始化你的activity所必须的组件。更重要的是你应该在这里调用setContentView()
方法来定义当前activity中作为用户接口的布局文件。
onPause()
	系统调用这个方法来第一时间通知你，用户将要离开当前的activity（然而通过它不能
一定表明activity正要被销毁）。你通常应该在这里提交那些应该被保存在当前用户会
话中的所有改变（因为用户很可能不会再回到当前activity了）。
	还有一些你应该掌握的生命周期回调方法，你会用它们在不同的活动之间给用户提供
流畅友好的用户体验，也会通过它们处理一些可能导致当前活动停止或者销毁的中断。所
有的回调方法会在稍后的Managing the Activity Lifecycle章节中谈论。

	


