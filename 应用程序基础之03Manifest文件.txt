Manifest文件(The Manifest File)（清单文件）
*************************************************************
Android系统在启动一个应用组件之前必须通过查看应用程序的AndroidManifest.xml文件（即“清单”文件）来知道组件的存在。因此你的应用程序必须在该文件中声明所有的组件，并且该文件必须被放置在应用程序项目的根目录下。

除了声明应用组件之外，manifest文件还要做许多事情，比如：
*识别应用程序所需要的任何用户权限，例如联网权限、对用户通讯信息的阅读权限。
*指出应用程序所需的最小API Level，应用程序使用的就是这个版本的API。
*声明应用所用到的硬件和软件特性，比如相机、蓝牙服务或者多点触控屏幕等。
*应用程序需要连接的API类库（而不是Android系统的底层APIs），比如Google Maps的类库。
*等等。

声明组件
----------
manifest文件的主要任务是通知系统应用程序的组件。例如，一个manifest文件可以像下边一样声明一个activity：
<code>
<?xml version="1.0" encoding="utf-8" ?>
<manifest ...>
	<application android:icon="@drawable/app_icon.png" ...>
		<activity android:name="com.example.project.ExampleActivity"
        	android:label="@string/example_label" ... >
        </activity>
	</application>
</manifest>
</code>
在<application>元素中，android:icon属性指向一个识别应用的图标资源。
在<activity>元素中，android:name属性指定了Activity子类的全类名（译者注：所谓全类名，就是包名+类名）。
android:label属性指定了一个字符串被用作该activity的用户可见的标签。

你必须想下边这样声明所有的应用程序组件：
*为所有的activity声明<activity>元素
*为所有的service声明<service>元素
*为所有的receiver声明<receiver>元素
*为所有的provider声明<provider>元素
在你的Activity应用中出现的所有的Activity、service、content provider如果没有在
manifest文件中声明那么它们对于系统是不可见的，因此也从不会运行。然而，
broadcast receiver可以在manifest文件中声明，也可以在代码中（作为
BroadcastReceiver对象）被动态创建，通过调用registerReceiver()方法动态注册进系
统。

想了解更多关于如何为你的应用组织manifest文件，请看The AndroidManifest.xml File
文档资料。

Declaring application requirements 声明应用的需求
----------------------------------
有各种各样的设备都是基于Android系统运行的，但是他们提供不相同的特性和性能。为
了防止你的应用被安装在一个缺乏你的应用所必须特性的设备上，在你的manifest文件中
声明硬件和软件需求来明确的定义你的应用所支持设备的类型参数是非常重要的。大多数
的声明仅仅是一些报告信息，系统是不可见的。但是像Google Play这样的其他一些设备
就可以读取这些信息，当用户从这些设备上下载应用的时候它就可与为用户提供筛选功能
（译者注：筛选出适合用户手机等使用的应用）。

例如，如果你的应用运行时需要一个相机，并且是基于Android2.1（API Level7），那么
你应该在你的manifest文件中声明这些需求。这样的话，那些没有相机或者基于Android
2.1一下系统的设备就不能从Google Play上安装你的应用。

然而，你也可以声明你的应用需要使用一个相机但是并不是必须的。这样，你的应用在运行时
必须进行检验来确保该设备是否有相机，如果没有相机或者相机不可用那么就会禁止掉应
用中的一些特性（译者注：禁止使用相机的特性，但是应用仍然可以运行，这个和上边所
说的声明成"必须"还是不一样的哈）。

以下是你设计开发你的应用时应该考虑的一些设备特性：
Screen size and density屏幕大小和密度
	为了通过屏幕的类型来分类设备，Android系统为每一个设备定义了两个特性：屏幕
	大小（屏幕的物理大小）和屏幕密度（屏幕上像素的物理密度，或者dpi-每英寸的点数）
	。为了简化所有不同类型的屏幕配置，Android系统把它们分为可选的组别，这样就更容
	易定位了。
	
	屏幕大小：small、normal、large和extra large。
	屏幕密度：low desity、medium desity、high desity 和extra high desity。	

	默认情况下，你的应用是兼容所有屏幕大小和密度的，因为Android系统会对你的UI
	布局和图像资源做出适当的调整。然而，你应该为某些屏幕尺寸创建出专门的布局，
	并为某些密度的设备提供专门的图片资源，使用可选的布局资源，并且通过在manifest文
	件中使用<support-screems>元素明确声明你的应用支持的屏幕大小。

	想要了解更多信息，请看Supporting Multiple Screems 文档。
	
Input configurations输入配置
	很多设备提供了不同类型的用户输入途径，比如硬件键盘，轨迹球，或者five-way导
	航pad。如果你的应用需要一个特别的输入硬件设备，那么你应该在manifest文件中用
	<uses-configuration>元素声明出来。然而，一个应用需要特殊的输入配置是很少见
	的。

Device features设备特性
	在一个Android系统的设备上可能存在有很多硬件和软件特性，比如照相机、光传感
	器、蓝牙、某个特定版本的OpenGL或者触摸屏的精度。你不应该假设所有的Android
	系统的设备某个特性都是可用的（除了标准的Android库），因此你应该在你的应用
	中使用<uses-feature>元素声明你的应用支持的所有特性。

Platform Version平台版本
	不同的Android设备经常运行在不同版本的Android平台上，Android1.6或者
	Android2.3。每一个连续的版本经常包含了前一个版本中不可用的APIs。为了指明
	哪一些APIs是可用的，每一个版本的平台都指定一个API Level（例如，Android1.0
	对应着API Level1，Android2.3对应着API Level9）。如果你使用的APIs是1.0以后
	的，那么你应该使用<uses-sdk>元素声明出最小级别的API。

为你的应用声明所有的这些需要时非常重要的。因为当你在Google Play上发布了你的应用
，Google Play会根据这些声明过滤出每一个设备可以使用的应用程序。这样你的应用就
仅仅对那些满足了所有你应用需求的设备可用。

想要了解更多有关Google Play如何基于这些需求来过滤应用，请参看Filter on Google
Play文档。

Application Resources 应用资源
--------------------------------------
一个Android应用并不仅仅是由代码组成的，它也需要很多资源，而这些资源是和代码分离
的，比如图片资源、音频文件、以及任何和该应用的视觉描述有关的资源。例如，你应该
定义动画、菜单、样式、颜色，还应该使用XML文件来定义activity布局。使用这样的应用
资源使我们不修改代码来更新应用各种各样的特征变得更加容易---仅仅通过提供一组可
选择的资源，这些资源可以让你为各种各样的设备特点定制不同的表现形式（比如不同的语言
、不同的屏幕大小）。

对于每一个包含在你项目中资源，SDK工具定义一个唯一的Integer类型的id与其相对应，
你可以在你的代码中或者XML中通过引用该id来引用响应的资源。例如，如果你的应用中
包含一个名为logo.png的图片文件（保存在res/drawable/目录下），那么SDK工具就会生
成一个名为R.drawable.logo的资源ID，你可以使用这个ID来引用对应的图片并把它插入
到用户界面上。

把资源从代码中分离出去的重要好处之一是可以让你针对不同配置的设备提供可选择的资
源。例如，通过在XML文件中定义UI上使用的字符串，然后将字符串翻译为其他语言，并
且将翻译之后的字符串保存在不同的文件中。（译者注：以下一句翻译不好）然后，你可
以在一个语言qualifier（限定词）上附加上语言资源的目录名（比如res/values-fr/代
表法语字符串）和用户的语言设置，Android系统会基于这个语言qualifier来为你的UI选
择合适的语言字符串。

Android为了你的可选资源，支持很多不同的qualifier（限定词）限定词。（译者注：以
下一句翻译不清晰）限定词是一个包含在你的资源目录名中的简短的字符串，这些资源是
用作定义设备配置信息的。用另一个例子来说，你经常可能根据设备的屏幕方向和大小为
你的activity视图创建出不同的布局。比如当设备的屏幕是竖直方向（高）时，你需要一
个竖直的按钮，但是当设备屏幕为水平方向（宽）时，你想要一个水平方向的按钮。为了
依据屏幕方向来改变布局，你可以定义两个不同的布局并在布局的目录名中使用合适的限
定语。然后系统会自动根据当前设备的方向使用合适的布局。

想要了解更多包含应用中资源信息或者如何为各种各样的设备外形创建出可选择的资源文
件的知识，请访问Application Resources开发文档。






	







